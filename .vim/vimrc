" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NRB:
"      If not already installed, please install vundle (Vim bundle manager):
"      git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
"
"      cp -r .vim/* ~/.vim  # install this this
"
"      Make sure to install tools:
"      sudo apt install python3-bashate python3-pip                # for bash
"      sudo apt install cppcheck clang clangd clang-tidy           # for C/C++
"      sudo apt install flake8 pyflakes pycodestyle mypy pylint3   # for python
"      sudo apt install npm eslint                                 # for js
"      sudo npm install -g jshint                                  # for js
"      python3 -m pip install cpplint systemdlint -U               # for systemd
"
"      TO RELOAD configuration file, type:
"      :so ~/.vim/vimrc
"
"      Don't forget to execute sometimes:
"      :PluginUpdate
""
"      TROUBLESHOOTING
"      ---------------
"
"      To profile vim:
"      :profile start profile.log
"      :profile func *
"      :profile file *
"      " At this point, do slow actions
"      :profile pause
"      :noautocmd qall!
"
"      To debug syntax coloring:
"      :set filetype?  # has vim detected the right filetype?
"
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""" PLUGINS
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Theme
" Plugin 'vim-scripts/peaksea'
Plugin 'tomasr/molokai'
" Plugin 'NLKNguyen/papercolor-theme'
Plugin 'altercation/vim-colors-solarized'  " See https://vimcolorschemes.com/light/top
" Plugin 'sainnhe/edge'

" Checkers
Plugin 'dense-analysis/ale'
Plugin 'rhysd/vim-grammarous'
Plugin 'joereynolds/sql-lint'

" Tools
Plugin 'vim-scripts/YankRing.vim'      " clipboard. CTRL-P after p!
" Plugin 'mhinz/vim-grepper'             " :GrepperGit text-to-search
" Plugin 'mileszs/ack.vim'               " :Ack [options] {pattern} [{directories}]
" Plugin 'preservim/nerdtree'            " file browser (too slow)
Plugin 'Vimjas/vim-python-pep8-indent' " indentation behavior
Plugin 'godlygeek/tabular'      " auto-align helper while typing

" Versionning
Plugin 'tpope/vim-fugitive'     " add :Git, diff ...
Plugin 'airblade/vim-gitgutter' " show diff

" Beautifulers
Plugin 'kergoth/vim-bitbake'     " coloring syntax
Plugin 'plasticboy/vim-markdown' " coloring syntax
Plugin 'peterhoeg/vim-qml'       " coloring syntax
Plugin 'asciidoc/vim-asciidoc'   " linter
Plugin 'pangloss/vim-javascript' " linter
Plugin 'frazrepo/vim-rainbow'    " rainbow colors for nested parenthesis
Plugin 'mfukar/robotframework-vim'  " coloring syntax
" => nerd is too slow
" Plugin 'ryanoasis/nerd-fonts'  " do not forget: sudo ~/.vim/bundle/nerd-fonts/install.sh
" Plugin 'tiagofumo/vim-nerdtree-syntax-highlight'
" Plugin 'ryanoasis/vim-devicons' " doc said put this as last plugin. For nerdtree
"                                 " devicons is really long to install.
Plugin 'itchyny/lightline.vim' " statusline / status bar
" Plugin 'maximbaz/lightline-ale'

Plugin 'martinda/Jenkinsfile-vim-syntax'
" Plugin 'codota/tabnine-vim'  " performance problem?

" Plugin 'junegunn/fzf.vim'
" Plugin 'junegunn/fzf'

" Plugin 'junegunn/vim-easy-align'  " type vipga / gaip=

" Plugin 'francoiscabrol/ranger.vim'  " explorer
" Plugin 'hut/ranger'
"
" Plugin 'hrsh7th/vim-vsnip'
" Plugin 'hrsh7th/vim-vsnip-integ'
" Plugin 'rafamadriz/friendly-snippets'

" All of your Plugins must be added before the following line
call vundle#end()            " required

filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on

"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"

let g:grammarous#default_comments_only_filetypes = {
            \ '*' : 1, 'help' : 0, 'markdown' : 0,
            \ }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => GUI related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set syntax=enable

" set background=dark  " Darkmode is wrong for eyes.
set background=light
try
    " colorscheme molokai  " dark mode
    " colorscheme edge
    " colorscheme solarized
    " colorscheme peaksea
catch
    colorscheme desert
endtry

let g:markdown_folding = 1
set nofoldenable

"" Cursor (#F0E68C)
"highlight Cursor guifg=black guibg=#F0E68C
"
"" Cursor line
"highlight CursorLine guibg=#242424 gui=none

augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END

" Set font according to system
" if has("mac") || has("macunix")
"     set gfn=IBM\ Plex\ Mono:h14,Hack:h14,Source\ Code\ Pro:h15,Menlo:h15
" elseif has("win16") || has("win32")
"     set gfn=IBM\ Plex\ Mono:h14,Source\ Code\ Pro:h12,Bitstream\ Vera\ Sans\ Mono:h11
" elseif has("gui_gtk2")
"     set gfn=IBM\ Plex\ Mono:h14,:Hack\ 14,Source\ Code\ Pro\ 12,Bitstream\ Vera\ Sans\ Mono\ 11
" elseif has("linux")
"     set gfn=IBM\ Plex\ Mono:h14,:Hack\ 14,Source\ Code\ Pro\ 12,Bitstream\ Vera\ Sans\ Mono\ 11
" elseif has("unix")
"     set gfn=Monospace\ 11
" endif

" ?
set incsearch

" surligne resultat de recherche
set hlsearch

" Show matching brackets when text indicator is over them
set showmatch

" Always show the status line
set laststatus=2

" syntax highlighting
syntax on
filetype off  " off/on to force refresh. Needed to make working vim-bitbake and vim-qml
filetype on
filetype indent on
filetype plugin on

au FileType c,cpp,objc,objcpp,h,hpp call rainbow#load() " rainbow parenthesis is overwritten somewhere :'(
let g:rainbow_active = 1
" call rainbow#load()

" let g:vsnip_filetypes.markdown = ['md']
" let g:vsnip_filetypes.cpp = ['cpp', 'hpp']
" let g:vsnip_filetypes.c = ['c', 'h']

" NRB: highlighting after colorscheme lines!
highlight WrongChar ctermbg=red guibg=red
syntax match WrongChar "[^\u0000-\u007F]\|\s\+$" containedin=ALL

" highlight NonAscii ctermbg=red guibg=red
" syntax match WrongChar "[^\u0000-\u007F]"


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => EDITING related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" spaces instead tabs: https://softwareengineering.stackexchange.com/questions/57/tabs-versus-spaces-what-is-the-proper-indentation-character-for-everything-in-e#:~:text=Use%20tabs%20to%20indent%20the%20start%20of%20the%20line%2C%20one,up%20regardless%20of%20tab%20size.
set tabstop=4 shiftwidth=4 expandtab

set nocompatible              " be iMproved, required
" filetype off                  " required
set modelines=0               " prevent security exploits? https://alioth-lists-archive.debian.net/pipermail/pkg-vim-maintainers/2007-June/004020.html
" set number                    " show line numbers. SLOW!

" autocompletion
set wildmenu
set wildmode=longest:list,full

" This turns off Vim's crazy default regex characters and makes searches use normal regexes.
" nnoremap / /\v
" vnoremap / /\v

set re=1 " Regex engine 1 feels smoother most of the times
set ttimeoutlen=10 " Responsive escape
set balloondelay=250 " Fast balloon popup.

" """ NERDTree
" " open a NERDTree automatically when vim starts up if no files were specified
" let NERDTreeHighlightCursorline = 0 " to fix slowness
set lazyredraw " to fix slowness
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"
" " open NERDTree automatically when vim starts up on opening a directory
" autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
"
" autocmd FileType nerdtree setlocal nolist
"
" " Nice icons in NERDTree given file type.
" if exists("g:loaded_webdevicons")
"   call webdevicons#refresh()
" endif

""" vsnip
" call dein#add('hrsh7th/vim-vsnip')
" call dein#add('hrsh7th/vim-vsnip-integ')
" imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
" smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'

""" ALE config
let g:ale_enabled = 1
let g:ale_completion_enabled = 0
let g:ale_lint_delay = 200   " millisecs
" let g:ale_lint_on_text_changed = 'always'  " never/insert/normal/always
let g:ale_lint_on_enter = 1
let g:ale_lint_on_filetype_changed = 1
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 1
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
" let g:ale_open_list = 1
let g:ale_sign_error = '‚óè'
let g:ale_sign_warning = '.'
let g:ale_python_pylint_executable = 'pylint3'
let g:ale_cache_executable_check_failures = 1 " to fix periodic anonying freezes

function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? 'OK' : printf(
    \   '%dW %dE',
    \   all_non_errors,
    \   all_errors
    \)
endfunction

" add linter status to the status line. 0W 0E is the objective!
let g:lightline = {
            \    'active': {
            \        'left': [
            \            [ 'mode', 'paste' ],
            \            [ 'readonly', 'filename', 'modified', 'linter' ]
            \        ] },
            \    'component': {
            \        'linter': '%{LinterStatus()}'
            \    },
            \ }

let &l:equalprg = 'cmake-format -'


""" Perf
" set updatetime=1000             " Speed up the updatetime so gitgutter and friends are quicker
" let g:NERDTreeLimitedSyntax = 1 " Mitigating lag issues

""" yankring
"     1) Press F11 and choose your buffer id
"     2) To paste this buffer: "<id>p
"         for example: "2p

"""
let g:ranger_replace_netrw = 1  " open ranger when vim open a directory

""" keyboard mapping

" With a map leader it's possible to do extra key combinations
let mapleader = ","

nnoremap <silent> <F2> :ALENextWrap<CR>     " next warning/error
nnoremap <silent> <F3> :GitGutterBufferToggle<CR>:ALEToggle<CR>  " remove left margin to easy copy/paste
nnoremap <silent> <F4> :set number!<CR>
nnoremap <silent> <F11> :YRShow<CR>         " show clipboards

" :nnoremap <F9> :NERDTree<cr>:normal P<cr>:normal O<cr>
nnoremap <silent> <F12> :NERDTreeToggle<CR> " file browser, everything unfold
" nnoremap <silent> <F12> :NERDTreeToggle<CR>:normal P<CR>:normal O<CR> " file browser, everything unfold
" map <Leader>r :NERDTreeFocus<cr>R<c-w><c-p>:CtrlPClearCache<cr> " to refresh
"
"
" nnoremap <leader><F12> :NERDTree<CR>:normal P<CR>:normal O<CR> " file browser, everything unfold

" :nnoremap <F9> :NERDTree<cr>:normal P<cr>:normal O<cr>
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR> " strip all trailing whitespace in the current file
nnoremap <leader>a :Ack

nnoremap <expr> <C-J> &diff ? ']c' : '<C-W>j'  " previous difference or window
nnoremap <expr> <C-K> &diff ? '[c' : '<C-W>k'  " next difference or window
